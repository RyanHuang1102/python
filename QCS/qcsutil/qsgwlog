#!/usr/bin/python

import argparse
import sys
# append import path
sys.path.append('/usr/local/qsgw/bin/qcsutil')
from qcslib.qcs_logger import *

def check_mesg_code_exist(service, code):
    if service == 'file':
        return False
    elif service == 'block':
        from MesgCodeTable.BlockMesgTable import mesg_code_table
        if code not in mesg_code_table:
            return False
        return mesg_code_table
    else:
        return False

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='qsgwlog',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=
        '''
	example:\n
        qsgwlog -s block -m CREATE_LUN_SUCCESS -a block01 ryanhuang mylun 10
        '''
    )
    parser.add_argument('-s', '--service', type=str, help='choose service', choices=['file', 'block', 'object'], required=True)
    parser.add_argument('-m', '--mesg_code', type=str, metavar='message_code', help='use mesg_code to get mesg', required=True)
    parser.add_argument('-n', '--notification', type=int, help='enable notification', choices=[0,1], default=0)
    parser.add_argument('-a', '--args', help="input params", metavar='params', nargs='+', required=True)
    args = parser.parse_args()

    params = args.args

    mesg_code_table = check_mesg_code_exit(args.service, args.mesg_code)
    if not mesg_code_table:
        print '[{0}] mesg_code={1} not exist!'.format(args.service, args.mesg_code)
        exit(1)

    mesg = mesg_code_table[args.mesg_code]['mesg']
    try:
        mesg = mesg.format(*params)
    except:
        print '[ERROR] params less than mesg:\n\tmesg={0}\n\tparams={1}.'.format(mesg,params)
        exit(1)

    level = mesg_code_table[args.mesg_code]['level']
    LOG_FILE = '/share/CACHEDEV1_DATA/log/qsgw_event.log'
    if level == 'NORMAL':
        LOG = qcs_logger('qsgwlog', LOG_FILE, logging.INFO)
        LOG.info(mesg)
    elif level == 'WARNING':
        LOG = qcs_logger('qsgwlog', LOG_FILE, logging.WARNING)
        LOG.warning(mesg)
    elif level == 'CRITICAL':
        LOG = qcs_logger('qsgwlog', LOG_FILE, logging.CRITICAL)
        LOG.critical(mesg)
    else:
        print '[ERROR] No support this level={0}'.format(level)
        exit(1)
